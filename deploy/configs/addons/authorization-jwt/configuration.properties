# When a JWT token is about to expire, a notification is sent by this JWT authorization extension to the client to renew
# its JWT token. The notification is sent to the client in advance with the number of seconds configured by this
# parameter before the JWT token expiry.
renewTokenBeforeSeconds=60

# Currently the available signature types are the following ones:
# hmac - a symmetric signature method using a single secret key both for signing and verification of JWT tokens.
#        the signature algorithms supported for this method, which are automatically selected according to the
#        length of the secret key, are as follows:
#         - HS256 (HMAC SHA256), requires a 32-byte (or longer) secret - recommended for most use cases
#         - HS384 (HMAC SHA384), requires a 48-byte (or longer) secret
#         - HS512 (HMAC SHA512), requires a 64-byte (or longer) secret
# rsa - an asymmetric signature method using a pair of public key and private key, where the private key is used
#       for signing a JWT token and the public key is used for verification of a JWT token.
#       the signature algorithms supported for this method, which are automatically selected according to the
#       length of the private key, are as follows:
#         - RS256 (RSA SHA256), requires a 2048-bit private key - recommended for most use cases
#         - RS384 (RSA SHA384), requires a 3072-bit private key
#         - RS512 (RSA SHA512), requires a 4096-bit private key
signature.type=hmac

# If your signature type is `hmac`, configure this parameter with a base64-encoded secret key for verification of the
# JWT tokens of your clients. The length of this secret key determines the signature algorithm to be used as explained
# in the documentation of the parameter `signature.type`. For most cases, a 32-byte secret key is recommended. You can
# generate a random base64-encoded 32-byte secret key using the command:
#    openssl rand -base64 32
signature.hmac.secret=He39zDQW7RdkOcxe3L9qvoSQ/ef40BG6Ro4hrHDjE+U=

# If your signature type is `rsa`, configure this parameter with the file path of the public key for verification of the
# JWT tokens of your clients. The size in bits of the private key corresponding to the public key determines the
# signature algorithm to be used as explained in the documentation of the parameter `signature.type`. For most cases, a
# 2048-bit private key is recommended. You can generate a pair of public key and private key using these commands:
#    openssl genrsa -out rsa-private-key.pem 2048
#    openssl rsa -in rsa-private-key.pem -pubout -outform PEM -out rsa-public-key.pem
#signature.rsa.publicKeyPath=./addons/authorization-jwt/rsa-public-key.pem
